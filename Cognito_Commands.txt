Cognito Commands: 


1) Using the CLI, create new identity pool, named DynamoPool, allow unauthenticated entities.
**** (use ^ - Shift + 6 if you are a windows user, not \) ****

aws cognito-identity create-identity-pool --identity-pool-name DynamoPool --allow-unauthenticated-identities --output json       

2) Create an IAM role named Cognito_DynamoPoolUnauth. 

aws iam create-role --role-name Cognito_DynamoPoolUnauth --assume-role-policy-document file://myCognitoPolicy.json --output json
 
3) Grant the Cognito_DynamoPoolUnauth role read access to DynamoDB by attaching a managed policy (AmazonDynamoDBReadOnlyAccess).

aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess --role-name Cognito_DynamoPoolUnauth 

4) Get the IAM role Amazon Resource Name (ARN).
aws iam get-role --role-name Cognito_DynamoPoolUnauth --output json 


5) Add our role to the Cognito Identity Pool. Replace the pool ID with your own pool ID and use the role ARN from the previous step.

aws cognito-identity set-identity-pool-roles --identity-pool-id "us-east-1:da4b6bec-0947-4f32-b2dd-dabcf9196ca1" --roles unauthenticated=arn:aws:iam::015684638550:role/Cognito_DynamoPoolUnauth --output json 

6) Double check it worked using: 

aws cognito-identity get-identity-pool-roles  --identity-pool-id "us-east-1:da4b6bec-0947-4f32-b2dd-dabcf9196ca1"

7) We can now specify the Cognito credentials in our application - i.e. in the JavaScript section of our webpage!
Replace the identity pool ID with your own and the role ARN with your own role ARN. 
We are going to add this snippet to our index.html:


AWS.config.credentials = new AWS.CognitoIdentityCredentials({
IdentityPoolId: "us-east-1:da4b6bec-0947-4f32-b2dd-dabcf9196ca1",
RoleArn: "arn:aws:iam::015684638550:role/Cognito_DynamoPoolUnauth"
});

